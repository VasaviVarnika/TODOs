const express = require('express')
const path = require('path')
const sqlite3 = require('sqlite3')
const {open} = require('sqlite')
const format = require('date-fns/format')
const isMatch = require('date-fns/isMatch')

let db = null
const app = express()
app.use(express.json())

const initialize = async () => {
  try {
    db = await open({
      filename: path.join(__dirname, 'todoApplication.db'),
      driver: sqlite3.Database,
    })
    app.listen(3000, () =>
      console.log('Server running at http://localhost:3000/'),
    )
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
    process.exit(1)
  }
}

initialize()

const outputResult = dbObject => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    category: dbObject.category,
    priority: dbObject.priority,
    status: dbObject.status,
    dueDate: dbObject.due_date,
  }
}

// Utility functions to check query parameters
const isValidCategory = category =>
  ['WORK', 'HOME', 'LEARNING'].includes(category)

const isValidPriority = priority => ['HIGH', 'MEDIUM', 'LOW'].includes(priority)

const isValidStatus = status =>
  ['TO DO', 'IN PROGRESS', 'DONE'].includes(status)

// API 1: GET /todos/
app.get('/todos/', async (request, response) => {
  const {search_q = '', priority, status, category} = request.query
  let getTodosQuery = ''
  let queryParams = []

  try {
    if (priority && !isValidPriority(priority)) {
      response.status(400).send('Invalid Todo Priority')
      return
    }
    if (status && !isValidStatus(status)) {
      response.status(400).send('Invalid Todo Status')
      return
    }
    if (category && !isValidCategory(category)) {
      response.status(400).send('Invalid Todo Category')
      return
    }

    getTodosQuery = `
      SELECT * FROM todo
      WHERE 
        todo LIKE '%${search_q}%' 
        ${priority ? `AND priority = '${priority}'` : ''} 
        ${status ? `AND status = '${status}'` : ''} 
        ${category ? `AND category = '${category}'` : ''};
    `

    const todos = await db.all(getTodosQuery, queryParams)
    response.send(todos.map(todo => outputResult(todo)))
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

// API 2: GET /todos/:todoId/
app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params

  try {
    const todoQuery = `SELECT * FROM todo WHERE id = ?;`
    const todo = await db.get(todoQuery, [todoId])
    if (todo) {
      response.send(outputResult(todo))
    } else {
      response.status(404).send('Todo Not Found')
    }
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

// API 3: GET /agenda/
app.get('/agenda/', async (request, response) => {
  const {date} = request.query

  try {
    if (!isMatch(date, 'yyyy-MM-dd')) {
      response.status(400).send('Invalid Due Date')
      return
    }
    const formattedDate = format(new Date(date), 'yyyy-MM-dd')
    const agendaQuery = `SELECT * FROM todo WHERE due_date = ?;`
    const todos = await db.all(agendaQuery, [formattedDate])
    response.send(todos.map(todo => outputResult(todo)))
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

// API 4: POST /todos/
app.post('/todos/', async (request, response) => {
  const {id, todo, priority, status, category, dueDate} = request.body

  try {
    if (!isValidPriority(priority)) {
      response.status(400).send('Invalid Todo Priority')
      return
    }
    if (!isValidStatus(status)) {
      response.status(400).send('Invalid Todo Status')
      return
    }
    if (!isValidCategory(category)) {
      response.status(400).send('Invalid Todo Category')
      return
    }
    if (!isMatch(dueDate, 'yyyy-MM-dd')) {
      response.status(400).send('Invalid Due Date')
      return
    }

    const formattedDate = format(new Date(dueDate), 'yyyy-MM-dd')
    const insertTodoQuery = `
      INSERT INTO todo (id, todo, priority, status, category, due_date)
      VALUES (?, ?, ?, ?, ?, ?);
    `
    await db.run(insertTodoQuery, [
      id,
      todo,
      priority,
      status,
      category,
      formattedDate,
    ])
    response.send('Todo Successfully Added')
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

// API 5: PUT /todos/:todoId/
// API 5: PUT /todos/:todoId/
app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const {status, priority, todo, category, dueDate} = request.body

  try {
    const previousTodoQuery = `SELECT * FROM todo WHERE id = ?;`
    const previousTodo = await db.get(previousTodoQuery, [todoId])

    if (!previousTodo) {
      response.status(404).send('Todo Not Found')
      return
    }

    // Check and validate the fields being updated
    if (status) {
      if (!isValidStatus(status)) {
        response.status(400).send('Invalid Todo Status')
        return
      }
      const updateStatusQuery = `UPDATE todo SET status = ? WHERE id = ?;`
      await db.run(updateStatusQuery, [status, todoId])
      response.send('Status Updated')
      return
    }

    if (priority) {
      if (!isValidPriority(priority)) {
        response.status(400).send('Invalid Todo Priority')
        return
      }
      const updatePriorityQuery = `UPDATE todo SET priority = ? WHERE id = ?;`
      await db.run(updatePriorityQuery, [priority, todoId])
      response.send('Priority Updated')
      return
    }

    if (category) {
      if (!isValidCategory(category)) {
        response.status(400).send('Invalid Todo Category')
        return
      }
      const updateCategoryQuery = `UPDATE todo SET category = ? WHERE id = ?;`
      await db.run(updateCategoryQuery, [category, todoId])
      response.send('Category Updated')
      return
    }

    if (dueDate) {
      if (!isMatch(dueDate, 'yyyy-MM-dd')) {
        response.status(400).send('Invalid Due Date')
        return
      }
      const formattedDate = format(new Date(dueDate), 'yyyy-MM-dd')
      const updateDueDateQuery = `UPDATE todo SET due_date = ? WHERE id = ?;`
      await db.run(updateDueDateQuery, [formattedDate, todoId])
      response.send('Due Date Updated')
      return
    }

    if (todo) {
      const updateTodoQuery = `UPDATE todo SET todo = ? WHERE id = ?;`
      await db.run(updateTodoQuery, [todo, todoId])
      response.send('Todo Updated')
      return
    }

    // If no recognized fields are being updated
    response.status(400).send('No Valid Fields to Update')
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

// API 6: DELETE /todos/:todoId/
app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params

  try {
    const deleteTodoQuery = `DELETE FROM todo WHERE id = ?;`
    await db.run(deleteTodoQuery, [todoId])
    response.send('Todo Deleted')
  } catch (error) {
    response.status(500).send('Internal Server Error')
  }
})

module.exports = app
